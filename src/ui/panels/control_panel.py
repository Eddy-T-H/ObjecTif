# src/ui/panels/control_panel.py
"""
Panel de contr√¥le droit - Gestion ADB et actions photos.
"""

from PyQt6.QtWidgets import (
    QWidget,
    QVBoxLayout,
    QHBoxLayout,
    QLabel,
    QGridLayout,
    QMessageBox,
    QGroupBox,
)
from PyQt6.QtCore import Qt, pyqtSignal, QTimer
from PyQt6.QtGui import QCursor
from PyQt6.QtWidgets import QApplication
from PyQt6.QtWidgets import QPushButton

from pathlib import Path
from loguru import logger
from typing import Optional
import subprocess

from src.core.device import ADBManager
from src.ui.widgets.adb_status import ADBStatusWidget
from src.ui.widgets.operation_popup import OperationPopup
from src.utils.error_handler import UserFriendlyErrorHandler


class ControlPanel(QWidget):
    """Panel de contr√¥le pour les actions ADB et la prise de photos."""

    # Signaux √©mis vers la fen√™tre principale
    connection_changed = pyqtSignal(bool)
    photo_taken = pyqtSignal(str, str)  # type, chemin_fichier

    def __init__(self, adb_manager: ADBManager, parent=None):
        super().__init__(parent)
        self.adb_manager = adb_manager

        # √âtat du contexte actuel
        self.current_case_path: Optional[Path] = None
        self.current_scelle_path: Optional[Path] = None
        self.current_object_id: Optional[str] = None

        self._setup_ui()

    def _setup_ui(self):
        """Configure l'interface du panel de contr√¥le avec qt-material."""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(8, 8, 8, 8)
        layout.setSpacing(12)

        # === STATUS ADB ===
        self.adb_status = ADBStatusWidget(self.adb_manager)
        self.adb_status.connection_changed.connect(self._on_connection_changed)
        layout.addWidget(self.adb_status)

        # === ACTIONS PHOTO ===
        self._setup_photo_section(layout)

        # === INFORMATIONS CONTEXTUELLES ===
        self._setup_info_section(layout)

        # Espace flexible
        layout.addStretch()

    def _setup_photo_section(self, layout):
        """Configure la section des actions photo avec qt-material."""
        photo_group = QGroupBox("üì∏ Actions Photos")
        # SUPPRESSION de setStyleSheet - qt-material g√®re automatiquement
        photo_layout = QVBoxLayout(photo_group)
        photo_layout.setSpacing(8)
        photo_layout.setContentsMargins(12, 20, 12, 12)

        # === BOUTON APPAREIL PHOTO ===
        self.btn_open_camera = QPushButton("üì± Ouvrir appareil photo")
        self.btn_open_camera.setEnabled(False)
        self.btn_open_camera.clicked.connect(self._open_camera)

        photo_layout.addWidget(self.btn_open_camera)

        # === S√âPARATEUR ===
        separator = QLabel()
        separator.setFixedHeight(1)
        # SUPPRESSION du setStyleSheet - qt-material g√®re les s√©parateurs
        photo_layout.addWidget(separator)

        # === BOUTONS PHOTO PRINCIPAUX ===
        grid_widget = QWidget()
        grid_layout = QGridLayout(grid_widget)
        grid_layout.setSpacing(8)
        grid_layout.setContentsMargins(0, 0, 0, 0)

        # Boutons d'action
        self.btn_photo_ferme = QPushButton("üîí Scell√©\nFerm√©")
        self.btn_photo_content = QPushButton("üîç Contenu\nScell√©")
        self.btn_photo_objet = QPushButton("üì± Objet\nd'Essai")
        self.btn_photo_recond = QPushButton("üì¶ Scell√©\nReconditionn√©")

        # Organisation en grille 2x2
        grid_layout.addWidget(self.btn_photo_ferme, 0, 0)
        grid_layout.addWidget(self.btn_photo_content, 0, 1)
        grid_layout.addWidget(self.btn_photo_objet, 1, 0)
        grid_layout.addWidget(self.btn_photo_recond, 1, 1)

        photo_layout.addWidget(grid_widget)

        # Stockage des boutons pour gestion d'√©tat
        self.photo_buttons = {
            "ferme": self.btn_photo_ferme,
            "contenu": self.btn_photo_content,
            "objet": self.btn_photo_objet,
            "recond": self.btn_photo_recond,
        }

        # Connexion des signaux
        for photo_type, btn in self.photo_buttons.items():
            btn.setEnabled(False)
            btn.clicked.connect(lambda checked, t=photo_type: self._take_photo(t))

        layout.addWidget(photo_group)

    def _setup_info_section(self, layout):
        """Configure la section d'informations contextuelles avec qt-material."""
        info_group = QGroupBox("‚ÑπÔ∏è Informations")
        # SUPPRESSION de setStyleSheet - qt-material g√®re automatiquement
        info_layout = QVBoxLayout(info_group)
        info_layout.setContentsMargins(10, 15, 10, 10)

        # Labels d'information - SUPPRESSION des setStyleSheet
        self.info_scelle = QLabel("üìÅ Aucun scell√© s√©lectionn√©")
        self.info_objet = QLabel("üì± Aucun objet s√©lectionn√©")

        # qt-material applique automatiquement un style coh√©rent
        info_layout.addWidget(self.info_scelle)
        info_layout.addWidget(self.info_objet)

        layout.addWidget(info_group)

    # SUPPRESSION des m√©thodes _apply_info_style_active et _apply_info_style_inactive
    # qt-material g√®re automatiquement les styles actif/inactif

    # === GESTIONNAIRES D'√âV√âNEMENTS ===

    def _on_connection_changed(self, is_connected: bool):
        """G√®re les changements d'√©tat de connexion ADB."""
        self._update_photo_buttons_state()
        self.connection_changed.emit(is_connected)

    # === ACTIONS PHOTO ===

    def _take_photo(self, photo_type: str):
        """Prend une photo du type sp√©cifi√©."""
        if not self.adb_manager.is_connected() or not self.current_scelle_path:
            return

        try:
            # Mapping des types de photo
            prefix_map = {
                "ferme": "Ferme",
                "contenu": "Contenu",
                "objet": self.current_object_id,
                "recond": "Reconditionne",
            }

            # V√©rification pour les photos d'objet
            if photo_type == "objet" and not self.current_object_id:
                logger.error("Aucun objet s√©lectionn√©")
                self._show_status_message("Aucun objet s√©lectionn√©")
                return

            prefix = prefix_map[photo_type]

            # Calcul du prochain num√©ro de s√©quence
            next_num = self._get_next_photo_number(prefix)

            # Cr√©ation du nom de fichier
            scelle_name = self.current_scelle_path.name
            file_name = f"{scelle_name}_{prefix}_{next_num}.jpg"
            save_path = self.current_scelle_path / file_name

            # === D√âBUT DE L'OP√âRATION ===
            self._start_photo_operation()

            # Popup de progression
            popup = OperationPopup(self)
            popup.show()

            def update_status(message):
                popup.update_message(message)
                QApplication.processEvents()

            # Prise de photo avec suivi d'√©tat
            success = self.adb_manager.take_photo(save_path, update_status)

            # Fermeture de la popup
            popup.close_popup()

            if success:
                self._show_status_message(f"Photo(s) sauvegard√©e(s) pour {prefix}")
                self.photo_taken.emit(photo_type, str(save_path))

                # Auto-effacement du message apr√®s 3 secondes
                QTimer.singleShot(3000, lambda: self._show_status_message(""))
            else:
                QMessageBox.warning(
                    self,
                    "√âchec de la photo",
                    "La photo n'a pas pu √™tre prise ou transf√©r√©e.\n\n"
                    "Solutions :\n"
                    "‚Ä¢ V√©rifiez que l'appareil photo fonctionne\n"
                    "‚Ä¢ Prenez une photo manuellement puis r√©essayez\n"
                    "‚Ä¢ V√©rifiez la connexion de l'appareil",
                )

        except Exception as e:
            title, message = UserFriendlyErrorHandler.handle_adb_error(
                e, "la prise de photo"
            )
            QMessageBox.warning(self, title, message)

        finally:
            self._end_photo_operation()

    def _open_camera(self):
        """Ouvre l'application appareil photo sur le t√©l√©phone."""
        try:
            if not self.adb_manager.is_connected():
                logger.warning("Pas de connexion ADB active")
                self._show_status_message("Erreur : Aucun appareil connect√©")
                return

            # S√©quence de d√©verrouillage et ouverture cam√©ra
            commands = [
                # R√©veil de l'appareil
                f'"{self.adb_manager.adb_command}" -s {self.adb_manager.current_device} shell input keyevent KEYCODE_WAKEUP',
                # D√©verrouillage par swipe
                f'"{self.adb_manager.adb_command}" -s {self.adb_manager.current_device} shell input swipe 500 1800 500 1000',
                # Ouverture de l'appareil photo
                f'"{self.adb_manager.adb_command}" -s {self.adb_manager.current_device} shell am start -a android.media.action.STILL_IMAGE_CAMERA',
            ]

            import time

            for i, command in enumerate(commands):
                subprocess.run(
                    command, shell=True, capture_output=True, text=True, timeout=5
                )
                if i < len(commands) - 1:  # Pause entre les commandes
                    time.sleep(0.5)

            logger.info("Application appareil photo ouverte avec succ√®s")
            self._show_status_message("Appareil photo ouvert")

        except Exception as e:
            error_msg = f"Erreur lors de l'ouverture de l'appareil photo: {e}"
            logger.error(error_msg)
            self._show_status_message(error_msg)

    # === M√âTHODES UTILITAIRES ===

    def _get_next_photo_number(self, prefix: str) -> int:
        """Calcule le prochain num√©ro de photo pour un pr√©fixe donn√©."""
        if not self.current_scelle_path:
            return 1

        max_num = 0
        pattern = f"*{prefix}_*.jpg"

        for photo in self.current_scelle_path.glob(pattern):
            try:
                num = int(photo.stem.split("_")[-1])
                max_num = max(max_num, num)
            except (ValueError, IndexError):
                continue

        return max_num + 1

    def _start_photo_operation(self):
        """D√©marre l'indication visuelle d'une op√©ration photo."""
        QApplication.setOverrideCursor(QCursor(Qt.CursorShape.WaitCursor))

        # D√©sactive tous les boutons photo
        for btn in self.photo_buttons.values():
            btn.setEnabled(False)
        self.btn_open_camera.setEnabled(False)

    def _end_photo_operation(self):
        """Termine l'indication visuelle d'une op√©ration photo."""
        QApplication.restoreOverrideCursor()

        # R√©active les boutons selon l'√©tat actuel
        self._update_photo_buttons_state()

    def _update_photo_buttons_state(self):
        """Met √† jour l'√©tat des boutons photo selon le contexte."""
        android_connected = self.adb_manager.is_connected()

        # Bouton appareil photo : juste besoin de la connexion
        self.btn_open_camera.setEnabled(android_connected)

        # Boutons de scell√© : connexion + scell√© s√©lectionn√©
        scelle_buttons_enabled = (
            android_connected and self.current_scelle_path is not None
        )
        self.btn_photo_ferme.setEnabled(scelle_buttons_enabled)
        self.btn_photo_content.setEnabled(scelle_buttons_enabled)
        self.btn_photo_recond.setEnabled(scelle_buttons_enabled)

        # Bouton objet : connexion + scell√© + objet s√©lectionn√©
        self.btn_photo_objet.setEnabled(
            android_connected
            and self.current_scelle_path is not None
            and self.current_object_id is not None
        )

    def _show_status_message(self, message: str):
        """Affiche un message dans la barre de statut de la fen√™tre parent."""
        try:
            if hasattr(self.parent(), "statusBar"):
                self.parent().statusBar().showMessage(message)
        except:
            pass

    def _update_context_info(self):
        """Met √† jour les informations contextuelles affich√©es avec qt-material."""
        # Informations sur le scell√©
        if self.current_scelle_path:
            scelle_name = self.current_scelle_path.name
            photo_count = self._count_scelle_photos()
            self.info_scelle.setText(f"üìÅ Scell√©: {scelle_name} ({photo_count} photos)")
            # qt-material g√®re automatiquement le style "actif"
        else:
            self.info_scelle.setText("üìÅ Aucun scell√© s√©lectionn√©")
            # qt-material g√®re automatiquement le style "inactif"

        # Informations sur l'objet
        if self.current_object_id and self.current_scelle_path:
            object_photo_count = self._count_object_photos(self.current_object_id)
            object_full_name = (
                f"{self.current_scelle_path.name}_{self.current_object_id}"
            )
            self.info_objet.setText(
                f"üéØ Objet: {object_full_name} ({object_photo_count} photos)"
            )
            # qt-material g√®re automatiquement le style "actif"
        else:
            self.info_objet.setText("üì± Aucun objet s√©lectionn√©")
            # qt-material g√®re automatiquement le style "inactif"

    def _count_scelle_photos(self) -> int:
        """Compte les photos du scell√© (hors objets)."""
        if not self.current_scelle_path:
            return 0

        count = 0
        for photo in self.current_scelle_path.glob("*.jpg"):
            # Exclut les photos d'objets
            stem_parts = photo.stem.split("_")
            if len(stem_parts) >= 2:
                type_id = stem_parts[-2]
                if not (len(type_id) == 1 and type_id.isalpha()):
                    count += 1
        return count

    def _count_object_photos(self, object_id: str) -> int:
        """Compte les photos d'un objet sp√©cifique."""
        if not self.current_scelle_path:
            return 0

        return len(list(self.current_scelle_path.glob(f"*_{object_id}_*.jpg")))

    # === M√âTHODES PUBLIQUES ===

    def update_context(
        self,
        case_path: Optional[Path] = None,
        scelle_path: Optional[Path] = None,
        object_id: Optional[str] = None,
    ):
        """Met √† jour le contexte actuel du panel."""
        self.current_case_path = case_path
        self.current_scelle_path = scelle_path
        self.current_object_id = object_id

        # Met √† jour l'interface
        self._update_photo_buttons_state()
        self._update_context_info()

        logger.debug(f"Contexte mis √† jour - Scell√©: {scelle_path}, Objet: {object_id}")

